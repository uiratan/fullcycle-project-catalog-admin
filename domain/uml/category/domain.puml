@startuml
'skinparam genericDisplay old

abstract class domain.ValueObject {
}

abstract class domain.Identifier {
}

abstract class domain.Entity<ID extends Identifier> {
  # ID id
  # <<Create>> Entity(ID)
  + ID getId()
  + boolean equals(Object)
  + int hashCode()
}

abstract class domain.AggregateRoot<ID extends Identifier> {
  # <<Create>> AggregateRoot(ID)
}

class domain.category.Category {
  - String name
  - String description
  - boolean active
  - Instant createdAt
  - Instant updatedAt
  - Instant deletedAt
  __
  - <<Create>> Category(CategoryID,String,String,boolean,Instant,Instant,Instant)
  + {static} Category newCategory(String,String,boolean)
  .. getters ..
  + CategoryID getId()
  + String getName()
  + String getDescription()
  + boolean isActive()
  + Instant getCreatedAt()
  + Instant getUpdatedAt()
  + Instant getDeletedAt()
}

class domain.category.CategoryID  {
  # String value
  __
  - <<Create>> CategoryID(String)
  ..factory methods..
  + {static} CategoryID unique()
  + {static} CategoryID from(String)
  + {static} CategoryID from(UUID)
  ..
  + String getValue()
  + boolean equals(Object)
  + int hashCode()
}

domain.ValueObject <|-- domain.Identifier
domain.Entity <|-- domain.AggregateRoot
domain.Identifier -* domain.Entity
domain.Identifier -* domain.AggregateRoot
'note right of AggregateRoot : In java, every class\nextends this one

domain.Identifier <|-- domain.category.CategoryID
domain.AggregateRoot <|-- domain.category.Category
domain.category.Category *- domain.category.CategoryID


@enduml